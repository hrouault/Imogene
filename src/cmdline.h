/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *detailed_help_help; /**< @brief Print help, including all details and hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int width_arg;	/**< @brief Width of the motifs (default='10').  */
  char * width_orig;	/**< @brief Width of the motifs original value given at command line.  */
  const char *width_help; /**< @brief Width of the motifs help description.  */
  double threshold_arg;	/**< @brief Threshold used for motif scanning (default='9').  */
  char * threshold_orig;	/**< @brief Threshold used for motif scanning original value given at command line.  */
  const char *threshold_help; /**< @brief Threshold used for motif scanning help description.  */
  int neighbext_arg;	/**< @brief Extent of the motif search within an alignment (default='20').  */
  char * neighbext_orig;	/**< @brief Extent of the motif search within an alignment original value given at command line.  */
  const char *neighbext_help; /**< @brief Extent of the motif search within an alignment help description.  */
  int nbmots_arg;	/**< @brief Number of motifs to consider (default='20').  */
  char * nbmots_orig;	/**< @brief Number of motifs to consider original value given at command line.  */
  const char *nbmots_help; /**< @brief Number of motifs to consider help description.  */
  char * coord_file_arg;	/**< @brief File of enhancer coordinates (default='coords.dat').  */
  char * coord_file_orig;	/**< @brief File of enhancer coordinates original value given at command line.  */
  const char *coord_file_help; /**< @brief File of enhancer coordinates help description.  */
  char * align_file_arg;	/**< @brief File of enhancer alignments.  */
  char * align_file_orig;	/**< @brief File of enhancer alignments original value given at command line.  */
  const char *align_file_help; /**< @brief File of enhancer alignments help description.  */
  char * poscoords_arg;	/**< @brief Positive sequences coords.  */
  char * poscoords_orig;	/**< @brief Positive sequences coords original value given at command line.  */
  const char *poscoords_help; /**< @brief Positive sequences coords help description.  */
  char * negcoords_arg;	/**< @brief Negative sequences coords.  */
  char * negcoords_orig;	/**< @brief Negative sequences coords original value given at command line.  */
  const char *negcoords_help; /**< @brief Negative sequences coords help description.  */
  char * posalign_arg;	/**< @brief Positive sequences alignments.  */
  char * posalign_orig;	/**< @brief Positive sequences alignments original value given at command line.  */
  const char *posalign_help; /**< @brief Positive sequences alignments help description.  */
  char * negalign_arg;	/**< @brief Negative sequences alignments.  */
  char * negalign_orig;	/**< @brief Negative sequences alignments original value given at command line.  */
  const char *negalign_help; /**< @brief Negative sequences alignments help description.  */
  char * motifs_arg;	/**< @brief file containing a list of motif definitons (default='bestuniq-pval.dat').  */
  char * motifs_orig;	/**< @brief file containing a list of motif definitons original value given at command line.  */
  const char *motifs_help; /**< @brief file containing a list of motif definitons help description.  */
  char * mots_w_names_arg;	/**< @brief file containing a list of motif definitons with their names in the first column (default='bestuniq-pval.dat').  */
  char * mots_w_names_orig;	/**< @brief file containing a list of motif definitons with their names in the first column original value given at command line.  */
  const char *mots_w_names_help; /**< @brief file containing a list of motif definitons with their names in the first column help description.  */
  int evolutionary_model_arg;	/**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) (default='1').  */
  char * evolutionary_model_orig;	/**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) original value given at command line.  */
  const char *evolutionary_model_help; /**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) help description.  */
  int species_arg;	/**< @brief Species studied (1=droso, 2= mus).  */
  char * species_orig;	/**< @brief Species studied (1=droso, 2= mus) original value given at command line.  */
  const char *species_help; /**< @brief Species studied (1=droso, 2= mus) help description.  */
  int scanwidth_arg;	/**< @brief Width of selected enhancers (default='1000').  */
  char * scanwidth_orig;	/**< @brief Width of selected enhancers original value given at command line.  */
  const char *scanwidth_help; /**< @brief Width of selected enhancers help description.  */
  char * opt_thr_file_arg;	/**< @brief file of optimal detection thresholds for different motifs.  */
  char * opt_thr_file_orig;	/**< @brief file of optimal detection thresholds for different motifs original value given at command line.  */
  const char *opt_thr_file_help; /**< @brief file of optimal detection thresholds for different motifs help description.  */
  const char *maskforscore_help; /**< @brief Masks motif matches for score help description.  */
  const char *weightmots_help; /**< @brief Uses pos and neg set to weight motifs help description.  */
  const char *repeat_masker_help; /**< @brief Uses repeat masked alignment/chromosome files help description.  */
  const char *mean_info_help; /**< @brief Set score threshold to PWM mean info help description.  */
  const char *wocons_help; /**< @brief Do NOT use conservation help description.  */
  const char *MCMCtest_help; /**< @brief Test Likelihood average with MCMC help description.  */
  const char *discard_on_gene_names_help; /**< @brief  help description.  */
  const char *discard_on_position_help; /**< @brief  help description.  */
  const char *scangen_help; /**< @brief Triggers scangen mode help description.  */
  char * masktrain_arg;	/**< @brief Masks training set for prediction.  */
  char * masktrain_orig;	/**< @brief Masks training set for prediction original value given at command line.  */
  const char *masktrain_help; /**< @brief Masks training set for prediction help description.  */
  const char *all_mots_only_help; /**< @brief Outputs results for the combination of all the motifs help description.  */
  const char *scangen2cons_help; /**< @brief Triggers scangen2cons mode help description.  */
  const char *scanmots_help; /**< @brief Triggers scanmots mode help description.  */
  int scanstep_arg;	/**< @brief Step of scanned genome (default='50').  */
  char * scanstep_orig;	/**< @brief Step of scanned genome original value given at command line.  */
  const char *scanstep_help; /**< @brief Step of scanned genome help description.  */
  char * phenotype_arg;	/**< @brief file containing a list of genes annotated with a relevant phenotype (used for histograms construction).  */
  char * phenotype_orig;	/**< @brief file containing a list of genes annotated with a relevant phenotype (used for histograms construction) original value given at command line.  */
  const char *phenotype_help; /**< @brief file containing a list of genes annotated with a relevant phenotype (used for histograms construction) help description.  */
  char * phenoback_arg;	/**< @brief file containing a list of genes annotated without the relevant phenotype (used for histograms construction).  */
  char * phenoback_orig;	/**< @brief file containing a list of genes annotated without the relevant phenotype (used for histograms construction) original value given at command line.  */
  const char *phenoback_help; /**< @brief file containing a list of genes annotated without the relevant phenotype (used for histograms construction) help description.  */
  const char *print_histo_sets_help; /**< @brief Print histograms for different gene sets help description.  */
  char * score_arg;	/**< @brief Computes score on a set of sequences (for a given number of motifs).  */
  char * score_orig;	/**< @brief Computes score on a set of sequences (for a given number of motifs) original value given at command line.  */
  const char *score_help; /**< @brief Computes score on a set of sequences (for a given number of motifs) help description.  */
  const char *display_help; /**< @brief Triggers display mode help description.  */
  const char *disp_mean_info_help; /**< @brief Triggers disp-mean-info mode help description.  */
  const char *dispscore_help; /**< @brief Triggers dispscore mode help description.  */
  const char *jaspardb_help; /**< @brief Display sites coords for Jaspar DB help description.  */
  const char *disp_tex_help; /**< @brief Display motifs on sequence(s), in tex format (text). help description.  */
  const char *wgaps_help; /**< @brief Display motifs on the alignments. Else motifs are just shown on one species. help description.  */
  const char *disp_svg_help; /**< @brief Display motifs on sequence(s), in svg format (picture). help description.  */
  const char *stats_help; /**< @brief Triggers stats mode help description.  */
  const char *counts_help; /**< @brief Conserved instances counting help description.  */
  const char *shifts_help; /**< @brief Shift statistics help description.  */
  const char *surround_help; /**< @brief Triggers surround mode help description.  */
  int window_arg;	/**< @brief Window size for smoothing in surround mode (default='50').  */
  char * window_orig;	/**< @brief Window size for smoothing in surround mode original value given at command line.  */
  const char *window_help; /**< @brief Window size for smoothing in surround mode help description.  */
  const char *motgen_help; /**< @brief Triggers motgen mode help description.  */
  const char *ref_help; /**< @brief Do NOT use conservation for motif generation nor selection help description.  */
  const char *motaffin_help; /**< @brief Affinates PWMs help description.  */
  const char *motcorr_help; /**< @brief Triggers motcorr mode help description.  */
  const char *first_interval_help; /**< @brief Only nearest motif help description.  */
  const char *pwmcorr_help; /**< @brief Triggers pwmcorr mode help description.  */
  const char *peakcorr_help; /**< @brief Triggers peakcorr mode help description.  */
  char * peaks1_arg;	/**< @brief Load peaks 1 coords.  */
  char * peaks1_orig;	/**< @brief Load peaks 1 coords original value given at command line.  */
  const char *peaks1_help; /**< @brief Load peaks 1 coords help description.  */
  char * peaks2_arg;	/**< @brief Load peaks 2 coords.  */
  char * peaks2_orig;	/**< @brief Load peaks 2 coords original value given at command line.  */
  const char *peaks2_help; /**< @brief Load peaks 2 coords help description.  */
  const char *roc_help; /**< @brief Triggers roc mode help description.  */
  const char *rocopti_help; /**< @brief Optimize threshold detection help description.  */
  const char *roc_on_sites_help; /**< @brief ROC curve on pos/neg TFBS help description.  */
  const char *best_pwm_help; /**< @brief Ranks motifs by AUC help description.  */
  const char *info_help; /**< @brief Infos about motifs (AUC, num False Positives, num False Negatives) help description.  */
  const char *per_mot_help; /**< @brief Computes ROC for each motif independently in a list help description.  */
  const char *per_mot_var_thr_help; /**< @brief Computes ROC for each motif independently in a list, varying threshold help description.  */
  const char *cumul_mot_var_thr_help; /**< @brief Computes ROC for combination of motifs, varying threshold help description.  */
  const char *cumul_mot_help; /**< @brief Computes ROC for a cumulating set of motifs help description.  */
  const char *combine_mot_help; /**< @brief ROC for a combination of motifs help description.  */
  const char *correlations_help; /**< @brief Correlations btw mots help description.  */
  const char *bestcombi_help; /**< @brief Ranks combinations of sites by their TP/FP ratio help description.  */
  const char *extract_help; /**< @brief Triggers extract mode (need a coordinate file) help description.  */
  const char *cons_motifs_help; /**< @brief Extract only those regions containing instances of given motifs. Returns a coordinate file or a reduced align-file. help description.  */
  const char *onlycons_help; /**< @brief Extract only conserved regions help description.  */
  const char *alsocons_help; /**< @brief Extract also conserved regions help description.  */
  const char *onlyref_help; /**< @brief Extract only ref species regions help description.  */
  const char *pwm_help; /**< @brief Triggers pwm mode help description.  */
  const char *nopseudocount_help; /**< @brief Pseudo-count=0 (for mixture models) help description.  */
  char * tfbs_arg;	/**< @brief TFBS file.  */
  char * tfbs_orig;	/**< @brief TFBS file original value given at command line.  */
  const char *tfbs_help; /**< @brief TFBS file help description.  */
  char * mat_arg;	/**< @brief Count matrices file.  */
  char * mat_orig;	/**< @brief Count matrices file original value given at command line.  */
  const char *mat_help; /**< @brief Count matrices file help description.  */
  char * pwm2jaspar_arg;	/**< @brief Motifs file (default='bestuniq-pval.dat').  */
  char * pwm2jaspar_orig;	/**< @brief Motifs file original value given at command line.  */
  const char *pwm2jaspar_help; /**< @brief Motifs file help description.  */
  char * jaspar2pwm_arg;	/**< @brief Motifs file.  */
  char * jaspar2pwm_orig;	/**< @brief Motifs file original value given at command line.  */
  const char *jaspar2pwm_help; /**< @brief Motifs file help description.  */
  char * transfac2pwm_arg;	/**< @brief Motifs file.  */
  char * transfac2pwm_orig;	/**< @brief Motifs file original value given at command line.  */
  const char *transfac2pwm_help; /**< @brief Motifs file help description.  */
  char * furlong2pwm_arg;	/**< @brief Motifs file.  */
  char * furlong2pwm_orig;	/**< @brief Motifs file original value given at command line.  */
  const char *furlong2pwm_help; /**< @brief Motifs file help description.  */
  const char *jaspar_rank_help; /**< @brief Triggers jaspar-rank mode help description.  */
  const char *backreg_help; /**< @brief Triggers backreg mode. help description.  */
  int numrepeat_arg;	/**< @brief If coordinates are given, number of repeats of each..  */
  char * numrepeat_orig;	/**< @brief If coordinates are given, number of repeats of each. original value given at command line.  */
  const char *numrepeat_help; /**< @brief If coordinates are given, number of repeats of each. help description.  */
  int size_arg;	/**< @brief Size of background regions..  */
  char * size_orig;	/**< @brief Size of background regions. original value given at command line.  */
  const char *size_help; /**< @brief Size of background regions. help description.  */
  const char *neargene_help; /**< @brief Triggers neargene mode help description.  */
  const char *define_peak_help; /**< @brief Defines a peak arounf a summit help description.  */
  const char *on_each_side_help; /**< @brief Finds the 2 nearest genes on 3' and 5' side help description.  */
  const char *byscore_help; /**< @brief triggers byscore mode help description.  */
  const char *byaffinity_help; /**< @brief ranks by site affinity help description.  */
  const char *rank_help; /**< @brief triggers rank mode help description.  */
  double fdr_arg;	/**< @brief ranks motifs by TPR given a FDR (default='0.01').  */
  char * fdr_orig;	/**< @brief ranks motifs by TPR given a FDR original value given at command line.  */
  const char *fdr_help; /**< @brief ranks motifs by TPR given a FDR help description.  */
  const char *comp_help; /**< @brief Triggers comp mode help description.  */
  int cutoff_for_comp_arg;	/**< @brief Maximum distance between coordinate centers (for coords/coords comparison) (default='1000').  */
  char * cutoff_for_comp_orig;	/**< @brief Maximum distance between coordinate centers (for coords/coords comparison) original value given at command line.  */
  const char *cutoff_for_comp_help; /**< @brief Maximum distance between coordinate centers (for coords/coords comparison) help description.  */
  char * refnames_arg;	/**< @brief Ref genes names.  */
  char * refnames_orig;	/**< @brief Ref genes names original value given at command line.  */
  const char *refnames_help; /**< @brief Ref genes names help description.  */
  char * compnames_arg;	/**< @brief Comp genes names.  */
  char * compnames_orig;	/**< @brief Comp genes names original value given at command line.  */
  const char *compnames_help; /**< @brief Comp genes names help description.  */
  char * refcoords_arg;	/**< @brief Ref genes coord file.  */
  char * refcoords_orig;	/**< @brief Ref genes coord file original value given at command line.  */
  const char *refcoords_help; /**< @brief Ref genes coord file help description.  */
  char * compcoords_arg;	/**< @brief Comp genes coord file.  */
  char * compcoords_orig;	/**< @brief Comp genes coord file original value given at command line.  */
  const char *compcoords_help; /**< @brief Comp genes coord file help description.  */
  const char *testevol_help; /**< @brief Triggers testevol mode help description.  */
  const char *pseudocount_help; /**< @brief Fits pseudo-count for most efficient PWM convergence help description.  */
  const char *timer_help; /**< @brief Computes CV times for max VS mean (MCMC) computation help description.  */
  const char *synthetic_help; /**< @brief Use synthetic data help description.  */
  const char *fitdist_help; /**< @brief Fits phylogenetic models with a modified distance help description.  */
  char * fitkmeans_arg;	/**< @brief Fits phylogenetic models with different mixture models. File containing paths to mixture matrices (default='matrices.dat ').  */
  char * fitkmeans_orig;	/**< @brief Fits phylogenetic models with different mixture models. File containing paths to mixture matrices original value given at command line.  */
  const char *fitkmeans_help; /**< @brief Fits phylogenetic models with different mixture models. File containing paths to mixture matrices help description.  */
  char * fitdist_kmeans_arg;	/**< @brief Fits phylogenetic models with different mixture models and with a modified distance. File containing paths to mixture matrices (default='matrices.dat ').  */
  char * fitdist_kmeans_orig;	/**< @brief Fits phylogenetic models with different mixture models and with a modified distance. File containing paths to mixture matrices original value given at command line.  */
  const char *fitdist_kmeans_help; /**< @brief Fits phylogenetic models with different mixture models and with a modified distance. File containing paths to mixture matrices help description.  */
  const char *fitscore_help; /**< @brief Fits phylogenetic models by varying detection score help description.  */
  const char *countwords_help; /**< @brief Triggers countwords mode help description.  */
  const char *compare_pseudo_count_help; /**< @brief Compare pseudo counts for some Ks help description.  */
  int numk_arg;	/**< @brief Max number of K-clusters. Goes into kmeans folder (relative to scangen executable) and loads matrices + kprobs files from k=2 to k=numk (default='2').  */
  char * numk_orig;	/**< @brief Max number of K-clusters. Goes into kmeans folder (relative to scangen executable) and loads matrices + kprobs files from k=2 to k=numk original value given at command line.  */
  const char *numk_help; /**< @brief Max number of K-clusters. Goes into kmeans folder (relative to scangen executable) and loads matrices + kprobs files from k=2 to k=numk help description.  */
  char * kprobs_arg;	/**< @brief File with mixture PWMs probabilities (default='kprobs.dat').  */
  char * kprobs_orig;	/**< @brief File with mixture PWMs probabilities original value given at command line.  */
  const char *kprobs_help; /**< @brief File with mixture PWMs probabilities help description.  */
  const char *nmers_help; /**< @brief Triggers nmers mode help description.  */
  const char *test_help; /**< @brief Triggers test mode help description.  */
  const char *numseq_help; /**< @brief Triggers numseq mode help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int detailed_help_given ;	/**< @brief Whether detailed-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int width_given ;	/**< @brief Whether width was given.  */
  unsigned int threshold_given ;	/**< @brief Whether threshold was given.  */
  unsigned int neighbext_given ;	/**< @brief Whether neighbext was given.  */
  unsigned int nbmots_given ;	/**< @brief Whether nbmots was given.  */
  unsigned int coord_file_given ;	/**< @brief Whether coord-file was given.  */
  unsigned int align_file_given ;	/**< @brief Whether align-file was given.  */
  unsigned int poscoords_given ;	/**< @brief Whether poscoords was given.  */
  unsigned int negcoords_given ;	/**< @brief Whether negcoords was given.  */
  unsigned int posalign_given ;	/**< @brief Whether posalign was given.  */
  unsigned int negalign_given ;	/**< @brief Whether negalign was given.  */
  unsigned int motifs_given ;	/**< @brief Whether motifs was given.  */
  unsigned int mots_w_names_given ;	/**< @brief Whether mots-w-names was given.  */
  unsigned int evolutionary_model_given ;	/**< @brief Whether evolutionary-model was given.  */
  unsigned int species_given ;	/**< @brief Whether species was given.  */
  unsigned int scanwidth_given ;	/**< @brief Whether scanwidth was given.  */
  unsigned int opt_thr_file_given ;	/**< @brief Whether opt-thr-file was given.  */
  unsigned int maskforscore_given ;	/**< @brief Whether maskforscore was given.  */
  unsigned int weightmots_given ;	/**< @brief Whether weightmots was given.  */
  unsigned int repeat_masker_given ;	/**< @brief Whether repeat-masker was given.  */
  unsigned int mean_info_given ;	/**< @brief Whether mean-info was given.  */
  unsigned int wocons_given ;	/**< @brief Whether wocons was given.  */
  unsigned int MCMCtest_given ;	/**< @brief Whether MCMCtest was given.  */
  unsigned int discard_on_gene_names_given ;	/**< @brief Whether discard-on-gene-names was given.  */
  unsigned int discard_on_position_given ;	/**< @brief Whether discard-on-position was given.  */
  unsigned int scangen_given ;	/**< @brief Whether scangen was given.  */
  unsigned int masktrain_given ;	/**< @brief Whether masktrain was given.  */
  unsigned int all_mots_only_given ;	/**< @brief Whether all-mots-only was given.  */
  unsigned int scangen2cons_given ;	/**< @brief Whether scangen2cons was given.  */
  unsigned int scanmots_given ;	/**< @brief Whether scanmots was given.  */
  unsigned int scanstep_given ;	/**< @brief Whether scanstep was given.  */
  unsigned int phenotype_given ;	/**< @brief Whether phenotype was given.  */
  unsigned int phenoback_given ;	/**< @brief Whether phenoback was given.  */
  unsigned int print_histo_sets_given ;	/**< @brief Whether print-histo-sets was given.  */
  unsigned int score_given ;	/**< @brief Whether score was given.  */
  unsigned int display_given ;	/**< @brief Whether display was given.  */
  unsigned int disp_mean_info_given ;	/**< @brief Whether disp-mean-info was given.  */
  unsigned int dispscore_given ;	/**< @brief Whether dispscore was given.  */
  unsigned int jaspardb_given ;	/**< @brief Whether jaspardb was given.  */
  unsigned int disp_tex_given ;	/**< @brief Whether disp-tex was given.  */
  unsigned int wgaps_given ;	/**< @brief Whether wgaps was given.  */
  unsigned int disp_svg_given ;	/**< @brief Whether disp-svg was given.  */
  unsigned int stats_given ;	/**< @brief Whether stats was given.  */
  unsigned int counts_given ;	/**< @brief Whether counts was given.  */
  unsigned int shifts_given ;	/**< @brief Whether shifts was given.  */
  unsigned int surround_given ;	/**< @brief Whether surround was given.  */
  unsigned int window_given ;	/**< @brief Whether window was given.  */
  unsigned int motgen_given ;	/**< @brief Whether motgen was given.  */
  unsigned int ref_given ;	/**< @brief Whether ref was given.  */
  unsigned int motaffin_given ;	/**< @brief Whether motaffin was given.  */
  unsigned int motcorr_given ;	/**< @brief Whether motcorr was given.  */
  unsigned int first_interval_given ;	/**< @brief Whether first-interval was given.  */
  unsigned int pwmcorr_given ;	/**< @brief Whether pwmcorr was given.  */
  unsigned int peakcorr_given ;	/**< @brief Whether peakcorr was given.  */
  unsigned int peaks1_given ;	/**< @brief Whether peaks1 was given.  */
  unsigned int peaks2_given ;	/**< @brief Whether peaks2 was given.  */
  unsigned int roc_given ;	/**< @brief Whether roc was given.  */
  unsigned int rocopti_given ;	/**< @brief Whether rocopti was given.  */
  unsigned int roc_on_sites_given ;	/**< @brief Whether roc-on-sites was given.  */
  unsigned int best_pwm_given ;	/**< @brief Whether best-pwm was given.  */
  unsigned int info_given ;	/**< @brief Whether info was given.  */
  unsigned int per_mot_given ;	/**< @brief Whether per-mot was given.  */
  unsigned int per_mot_var_thr_given ;	/**< @brief Whether per-mot-var-thr was given.  */
  unsigned int cumul_mot_var_thr_given ;	/**< @brief Whether cumul-mot-var-thr was given.  */
  unsigned int cumul_mot_given ;	/**< @brief Whether cumul-mot was given.  */
  unsigned int combine_mot_given ;	/**< @brief Whether combine-mot was given.  */
  unsigned int correlations_given ;	/**< @brief Whether correlations was given.  */
  unsigned int bestcombi_given ;	/**< @brief Whether bestcombi was given.  */
  unsigned int extract_given ;	/**< @brief Whether extract was given.  */
  unsigned int cons_motifs_given ;	/**< @brief Whether cons-motifs was given.  */
  unsigned int onlycons_given ;	/**< @brief Whether onlycons was given.  */
  unsigned int alsocons_given ;	/**< @brief Whether alsocons was given.  */
  unsigned int onlyref_given ;	/**< @brief Whether onlyref was given.  */
  unsigned int pwm_given ;	/**< @brief Whether pwm was given.  */
  unsigned int nopseudocount_given ;	/**< @brief Whether nopseudocount was given.  */
  unsigned int tfbs_given ;	/**< @brief Whether tfbs was given.  */
  unsigned int mat_given ;	/**< @brief Whether mat was given.  */
  unsigned int pwm2jaspar_given ;	/**< @brief Whether pwm2jaspar was given.  */
  unsigned int jaspar2pwm_given ;	/**< @brief Whether jaspar2pwm was given.  */
  unsigned int transfac2pwm_given ;	/**< @brief Whether transfac2pwm was given.  */
  unsigned int furlong2pwm_given ;	/**< @brief Whether furlong2pwm was given.  */
  unsigned int jaspar_rank_given ;	/**< @brief Whether jaspar-rank was given.  */
  unsigned int backreg_given ;	/**< @brief Whether backreg was given.  */
  unsigned int numrepeat_given ;	/**< @brief Whether numrepeat was given.  */
  unsigned int size_given ;	/**< @brief Whether size was given.  */
  unsigned int neargene_given ;	/**< @brief Whether neargene was given.  */
  unsigned int define_peak_given ;	/**< @brief Whether define-peak was given.  */
  unsigned int on_each_side_given ;	/**< @brief Whether on-each-side was given.  */
  unsigned int byscore_given ;	/**< @brief Whether byscore was given.  */
  unsigned int byaffinity_given ;	/**< @brief Whether byaffinity was given.  */
  unsigned int rank_given ;	/**< @brief Whether rank was given.  */
  unsigned int fdr_given ;	/**< @brief Whether fdr was given.  */
  unsigned int comp_given ;	/**< @brief Whether comp was given.  */
  unsigned int cutoff_for_comp_given ;	/**< @brief Whether cutoff-for-comp was given.  */
  unsigned int refnames_given ;	/**< @brief Whether refnames was given.  */
  unsigned int compnames_given ;	/**< @brief Whether compnames was given.  */
  unsigned int refcoords_given ;	/**< @brief Whether refcoords was given.  */
  unsigned int compcoords_given ;	/**< @brief Whether compcoords was given.  */
  unsigned int testevol_given ;	/**< @brief Whether testevol was given.  */
  unsigned int pseudocount_given ;	/**< @brief Whether pseudocount was given.  */
  unsigned int timer_given ;	/**< @brief Whether timer was given.  */
  unsigned int synthetic_given ;	/**< @brief Whether synthetic was given.  */
  unsigned int fitdist_given ;	/**< @brief Whether fitdist was given.  */
  unsigned int fitkmeans_given ;	/**< @brief Whether fitkmeans was given.  */
  unsigned int fitdist_kmeans_given ;	/**< @brief Whether fitdist-kmeans was given.  */
  unsigned int fitscore_given ;	/**< @brief Whether fitscore was given.  */
  unsigned int countwords_given ;	/**< @brief Whether countwords was given.  */
  unsigned int compare_pseudo_count_given ;	/**< @brief Whether compare-pseudo-count was given.  */
  unsigned int numk_given ;	/**< @brief Whether numk was given.  */
  unsigned int kprobs_given ;	/**< @brief Whether kprobs was given.  */
  unsigned int nmers_given ;	/**< @brief Whether nmers was given.  */
  unsigned int test_given ;	/**< @brief Whether test was given.  */
  unsigned int numseq_given ;	/**< @brief Whether numseq was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
  int discarding_group_counter; /**< @brief Counter for group discarding */
  int backreg_mode_counter; /**< @brief Counter for mode backreg */
  int byscore_mode_counter; /**< @brief Counter for mode byscore */
  int comp_mode_counter; /**< @brief Counter for mode comp */
  int countwords_mode_counter; /**< @brief Counter for mode countwords */
  int disp_mean_info_mode_counter; /**< @brief Counter for mode disp_mean_info */
  int display_mode_counter; /**< @brief Counter for mode display */
  int dispscore_mode_counter; /**< @brief Counter for mode dispscore */
  int extract_mode_counter; /**< @brief Counter for mode extract */
  int furlong2pwm_mode_counter; /**< @brief Counter for mode furlong2pwm */
  int jaspar_rank_mode_counter; /**< @brief Counter for mode jaspar_rank */
  int jaspar2pwm_mode_counter; /**< @brief Counter for mode jaspar2pwm */
  int motaffin_mode_counter; /**< @brief Counter for mode motaffin */
  int motcorr_mode_counter; /**< @brief Counter for mode motcorr */
  int motgen_mode_counter; /**< @brief Counter for mode motgen */
  int neargene_mode_counter; /**< @brief Counter for mode neargene */
  int nmers_mode_counter; /**< @brief Counter for mode nmers */
  int numseq_mode_counter; /**< @brief Counter for mode numseq */
  int peakcorr_mode_counter; /**< @brief Counter for mode peakcorr */
  int pwm_mode_counter; /**< @brief Counter for mode pwm */
  int pwm2jaspar_mode_counter; /**< @brief Counter for mode pwm2jaspar */
  int pwmcorr_mode_counter; /**< @brief Counter for mode pwmcorr */
  int rank_mode_counter; /**< @brief Counter for mode rank */
  int roc_mode_counter; /**< @brief Counter for mode roc */
  int scangen_mode_counter; /**< @brief Counter for mode scangen */
  int scangen2cons_mode_counter; /**< @brief Counter for mode scangen2cons */
  int scanmots_mode_counter; /**< @brief Counter for mode scanmots */
  int stats_mode_counter; /**< @brief Counter for mode stats */
  int surround_mode_counter; /**< @brief Counter for mode surround */
  int test_mode_counter; /**< @brief Counter for mode test */
  int testevol_mode_counter; /**< @brief Counter for mode testevol */
  int transfac2pwm_mode_counter; /**< @brief Counter for mode transfac2pwm */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the detailed help output (including hidden options and details) */
extern const char *gengetopt_args_info_detailed_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the detailed help (including hidden options and details)
 */
void cmdline_parser_print_detailed_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
