/** @file genmot_cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GENMOT_CMDLINE_H
#define GENMOT_CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef GENMOT_CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define GENMOT_CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef GENMOT_CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define GENMOT_CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define GENMOT_CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef GENMOT_CMDLINE_PARSER_VERSION
/** @brief the program version */
#define GENMOT_CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct genmot_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int width_arg;	/**< @brief Width of the motifs (default='10').  */
  char * width_orig;	/**< @brief Width of the motifs original value given at command line.  */
  const char *width_help; /**< @brief Width of the motifs help description.  */
  double threshold_arg;	/**< @brief Threshold used for motif scanning (default='9').  */
  char * threshold_orig;	/**< @brief Threshold used for motif scanning original value given at command line.  */
  const char *threshold_help; /**< @brief Threshold used for motif scanning help description.  */
  int neighbext_arg;	/**< @brief Extent of the motif search within an alignment (default='20').  */
  char * neighbext_orig;	/**< @brief Extent of the motif search within an alignment original value given at command line.  */
  const char *neighbext_help; /**< @brief Extent of the motif search within an alignment help description.  */
  int nbmots_arg;	/**< @brief Number of motifs to consider at maximum (default='20').  */
  char * nbmots_orig;	/**< @brief Number of motifs to consider at maximum original value given at command line.  */
  const char *nbmots_help; /**< @brief Number of motifs to consider at maximum help description.  */
  char * coord_file_arg;	/**< @brief File of enhancer coordinates (default='coords.dat').  */
  char * coord_file_orig;	/**< @brief File of enhancer coordinates original value given at command line.  */
  const char *coord_file_help; /**< @brief File of enhancer coordinates help description.  */
  char * align_file_arg;	/**< @brief File of enhancer alignments.  */
  char * align_file_orig;	/**< @brief File of enhancer alignments original value given at command line.  */
  const char *align_file_help; /**< @brief File of enhancer alignments help description.  */
  int evolutionary_model_arg;	/**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) (default='1').  */
  char * evolutionary_model_orig;	/**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) original value given at command line.  */
  const char *evolutionary_model_help; /**< @brief Evolutionary model used for motif generation (1=felsen, 2=halpern) help description.  */
  int species_arg;	/**< @brief Species studied (1=droso, 2= mus).  */
  char * species_orig;	/**< @brief Species studied (1=droso, 2= mus) original value given at command line.  */
  const char *species_help; /**< @brief Species studied (1=droso, 2= mus) help description.  */
  int scanwidth_arg;	/**< @brief Width of selected enhancers (default='1000').  */
  char * scanwidth_orig;	/**< @brief Width of selected enhancers original value given at command line.  */
  const char *scanwidth_help; /**< @brief Width of selected enhancers help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int width_given ;	/**< @brief Whether width was given.  */
  unsigned int threshold_given ;	/**< @brief Whether threshold was given.  */
  unsigned int neighbext_given ;	/**< @brief Whether neighbext was given.  */
  unsigned int nbmots_given ;	/**< @brief Whether nbmots was given.  */
  unsigned int coord_file_given ;	/**< @brief Whether coord-file was given.  */
  unsigned int align_file_given ;	/**< @brief Whether align-file was given.  */
  unsigned int evolutionary_model_given ;	/**< @brief Whether evolutionary-model was given.  */
  unsigned int species_given ;	/**< @brief Whether species was given.  */
  unsigned int scanwidth_given ;	/**< @brief Whether scanwidth was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct genmot_cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure genmot_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure genmot_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *genmot_args_info_purpose;
/** @brief the usage string of the program */
extern const char *genmot_args_info_usage;
/** @brief all the lines making the help output */
extern const char *genmot_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int genmot_cmdline_parser (int argc, char **argv,
  struct genmot_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use genmot_cmdline_parser_ext() instead
 */
int genmot_cmdline_parser2 (int argc, char **argv,
  struct genmot_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int genmot_cmdline_parser_ext (int argc, char **argv,
  struct genmot_args_info *args_info,
  struct genmot_cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int genmot_cmdline_parser_dump(FILE *outfile,
  struct genmot_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int genmot_cmdline_parser_file_save(const char *filename,
  struct genmot_args_info *args_info);

/**
 * Print the help
 */
void genmot_cmdline_parser_print_help(void);
/**
 * Print the version
 */
void genmot_cmdline_parser_print_version(void);

/**
 * Initializes all the fields a genmot_cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void genmot_cmdline_parser_params_init(struct genmot_cmdline_parser_params *params);

/**
 * Allocates dynamically a genmot_cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized genmot_cmdline_parser_params structure
 */
struct genmot_cmdline_parser_params *genmot_cmdline_parser_params_create(void);

/**
 * Initializes the passed genmot_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void genmot_cmdline_parser_init (struct genmot_args_info *args_info);
/**
 * Deallocates the string fields of the genmot_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void genmot_cmdline_parser_free (struct genmot_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int genmot_cmdline_parser_required (struct genmot_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GENMOT_CMDLINE_H */
