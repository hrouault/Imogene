#!/usr/bin/env python

import sys
import os
import shutil
import string
import glob
import datetime
import bisect
import errno

def mkdir(path):
   try:
      os.mkdir(path)
   except os.error, e:
      if e.errno != errno.EEXIST:
         raise

sys.path.append("@pythondir@")
import mapping

os.chdir('@pkgdatadir@')
mkdir('eutherian')
os.chdir('eutherian')
print "[",datetime.datetime.now(),"]  Downloading Enrendo Pecan Ortheus alignment files from ENSEMBL..."
print 

mkdir('alignments')
os.chdir("alignments")
#os.system('wget -c -nd ftp://ftp.ensembl.org/pub/release-63/emf/ensembl-compara/epo_12_eutherian/*')

print "[",datetime.datetime.now(),"]  Extracting alignment files..."
print

#os.system('gunzip -v *.gz')

print "[",datetime.datetime.now(),"]  Converting EMF files to fasta..."
print

try:
   import Cython
   print "[",datetime.datetime.now(),"]  Using Cython for emf2fasta conversion..."
   print
   import pyximport
   pyximport.install()
   import emf2fasta
except:
   print "[",datetime.datetime.now(),"]  Using Cython for emf2fasta conversion..."
   print
   execfile("emf2fasta.pyx")

sys.exit(1)


   
os.chdir('..')

print 'ok'
sys.exit()


print "[",datetime.datetime.now(),"]  Getting Flybase annotation files..."
print 
mkdir("annot")
os.chdir("annot")

os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-2L-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-2R-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-3L-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-3R-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-4-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-X-r5.38.gff.gz"')

print "[",datetime.datetime.now(),"]  Extracting coordinate files..."
print

os.system('gunzip *.gff.gz')

print "[",datetime.datetime.now(),"]  Relevant coordinate extraction."
print 

os.system('awk \'/repeatmasker_dummy\tmatch\t/ {print $1,$4,$5}\' dmel*.gff | uniq > repeat-coord.dat')
os.system('awk \'/FlyBase\tCDS\t/ {print $1,$4,$5}\' dmel*.gff | uniq > CDS-coord.dat')
os.system('awk \'/FlyBase\tmRNA\t/ {\
   if ($7 == "+"){\
      print $1,$4\
   } else {\
      print $1,$5\
   }\
}\' dmel*.gff | uniq > TSS-coord.dat')
   

def processcoord(coords):
   for i in coords:
      i[1]=int(i[1])
      i[2]=int(i[2])
   coords.sort()

## Open file containing coding sequence coordinates
fcds=open("CDS-coord.dat")
cds=[i.rstrip().split(" ") for i in fcds.readlines()]
processcoord(cds)
cds
fcds.close()

## Open file containing repeated sequence coordinates
frepeat=open("repeat-coord.dat")
repeat=[i.rstrip().split(" ") for i in frepeat.readlines()]
processcoord(repeat)
frepeat.close()

os.chdir("..")

print("Relevant coordinates successfully imported.")

## Mask functions
def maskseq(start,stop,seq,mode):
   """Mask an aligned sequence (do not take into account gaps)
   start and stop should be integers with 0 corresponding to the start of the given sequence
   mode 0 mask with N
   mode 1 mask by converting the letter to lowercase
   """
   curpos=0
   for i,s in enumerate(seq):
      if s!='-' and s!='\n':
         if curpos>=start and curpos<=stop:
            if mode==0:
               seq[i]='N'
            elif mode==1:
               seq[i]=string.lower(s)
         curpos+=1

## Record selection functions
def posrecordleft(coordlist,coord):
   pos=bisect.bisect_left(coordlist,coord)
   if pos>0:
      pos=pos-1
   return pos

## Iterate over alignment files
os.chdir("alignments")
fmap=open("map")
maps=[i.rstrip().split("\t") for i in fmap.readlines()]
fmap.close

for i in maps:
   coordmel=i[1:4]
   if coordmel[1]!="NA" and coordmel[2]!='NA':
      coordmel[0]=coordmel[0][3:]
      coordmel[1]=int(coordmel[1])
      coordmel[2]=int(coordmel[2])
      r5coord=mapping.r4_map(coordmel)
      if  r5coord != ["", 0, 0]:
         os.chdir(i[0])
         with open("mavid.mfa") as fmavid:
            with open ("mavid2.mfa","w") as fmavid2:
               firstline=fmavid.readline()
               fmavid2.write(firstline.rstrip())
               fmavid2.write(" "+r5coord[0]+" "+str(r5coord[1])+" "+str(r5coord[2])+"\n")
               for line in fmavid.readlines():
                  if line[0]=='>':
                     fmavid2.write("\n"+line)
                  else:
                     fmavid2.write(line.rstrip())
         shutil.move("mavid2.mfa","mavid.mfa")
         os.chdir("..")
      else:
         shutil.rmtree(i[0])
   else:
      shutil.rmtree(i[0])



for folder in glob.glob('[0-9]*/'):
   print "Processing folder ",folder
   os.chdir(folder)
   with open('mavid.mfa') as fmavid:
      with open('mavid2.mfa', 'w' ) as fmavid2:

         ## Read coordinates
         coordline=fmavid.readline()
         fmavid2.write(coordline)
         coordline=coordline.rstrip().split(" ")
         coordstart=[coordline[1],int(coordline[2]),int(coordline[2])]
         coordstop=[coordline[1],int(coordline[3]),int(coordline[3])]
         
         ## Mask sequences
         seqline=list(fmavid.readline())
         posstart=posrecordleft(cds,coordstart)
         posstop=posrecordleft(cds,coordstop)
         for i in range(posstart,posstop):
            record=cds[i]
            if record[0]==coordstart[0]:
               maskseq(record[1]-coordstart[1],record[2]-coordstart[1],seqline,0)
         posstart=posrecordleft(repeat,coordstart)
         posstop=posrecordleft(repeat,coordstop)
         for i in range(posstart,posstop):
            record=repeat[i]
            if record[0]==coordstart[0]:
               maskseq(record[1]-coordstart[1],record[2]-coordstart[1],seqline,1)
         fmavid2.write(''.join(seqline))
         for i in fmavid.readlines():
            fmavid2.write(i)
   shutil.move("mavid2.mfa","mavid.mfa")
   os.chdir("..")
