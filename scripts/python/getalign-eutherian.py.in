#!/usr/bin/env python

import sys
import os
import shutil
import string
import glob
import datetime
import bisect
import errno

def mkdir(path):
   try:
      os.mkdir(path)
   except os.error, e:
      if e.errno != errno.EEXIST:
         raise

sys.path.append("@pythondir@")
import mapping

os.chdir('@pkgdatadir@')
mkdir('eutherian')
os.chdir('eutherian')
print "[",datetime.datetime.now(),"]  Downloading Enrendo Pecan Ortheus alignment files from ENSEMBL..."
print 

mkdir('alignments')
os.chdir("alignments")
os.system('wget -c -nd ftp://ftp.ensembl.org/pub/release-63/emf/ensembl-compara/epo_12_eutherian/*')

print "[",datetime.datetime.now(),"]  Extracting alignment files..."
print

os.system('gunzip -v *.gz')

print "[",datetime.datetime.now(),"]  Converting EMF files to fasta..."
print

try:
   import Cython
   print "[",datetime.datetime.now(),"]  Using Cython for emf2fasta conversion..."
   print
   import pyximport
   pyximport.install()
   import emf2fasta
except:
   print "[",datetime.datetime.now(),"]  Using Python for emf2fasta conversion..."
   print
   execfile("emf2fasta.pyx")

for file in glob.glob('*.emf'):
   os.remove(file)

os.chdir('..')

print "[",datetime.datetime.now(),"]  Getting ENSEMBL GTF annotation file..."
print 

mkdir("annot")
os.chdir("annot")

os.system('wget -c "ftp://ftp.ensembl.org/pub/release-63/gtf/mus_musculus/Mus_musculus.NCBIM37.63.gtf.gz"')

print "[",datetime.datetime.now(),"]  Extracting coordinate files..."
print

os.system('gunzip *.gtf.gz')

print "[",datetime.datetime.now(),"]  Relevant coordinate extraction."
print 

os.system('awk \'/\tCDS\t/ {print $1,$4,$5}\' *.gtf | uniq > CDS-coord.dat')

def processcoord(coords):
   for i in coords:
      i[1]=int(i[1])
      i[2]=int(i[2])
   coords.sort()

## Open file containing coding sequence coordinates
fcds=open("CDS-coord.dat")
cds=[i.rstrip().split(" ") for i in fcds.readlines()]
processcoord(cds)
fcds.close()

os.chdir("..")

print "[",datetime.datetime.now(),"]  Relevant coordinates successfully imported."
print 

## Mask functions
def maskseq(start,stop,seq,mode):
   """Mask an aligned sequence (do not take into account gaps)
   start and stop should be integers with 0 corresponding to the start of the given sequence
   mode 0 mask with N
   mode 1 mask by converting the letter to lowercase
   """
   curpos=0
   for i,s in enumerate(seq):
      if s!='-' and s!='\n':
         if curpos>=start and curpos<=stop:
            if mode==0:
               seq[i]='N'
            elif mode==1:
               seq[i]=string.lower(s)
         curpos+=1

## Record selection functions
def posrecordleft(coordlist,coord):
   pos=bisect.bisect_left(coordlist,coord)
   if pos>0:
      pos=pos-1
   return pos

## Iterate over alignment files
os.chdir("alignments")

print "[",datetime.datetime.now(),"]  Masking CDS..."
print 

for folder in glob.glob('chr*/'):
   print "Processing folder ",folder
   os.chdir(folder)
   for file in glob.glob('*.fa'):
      with open(file) as fmavid:
         with open('foo.fa', 'w' ) as fmavid2:

            ## Read coordinates
            coordline=fmavid.readline()
            fmavid2.write(coordline)
            coordline=coordline.rstrip().split(" ")
            coordstart=[coordline[1],int(coordline[2]),int(coordline[2])]
            coordstop=[coordline[1],int(coordline[3]),int(coordline[3])]
            
            ## Mask mouse CDS
            seqline=list(fmavid.readline())
            posstart=posrecordleft(cds,coordstart)
            posstop=posrecordleft(cds,coordstop)
            for i in range(posstart,posstop):
               record=cds[i]
               if record[0]==coordstart[0]:
                  maskseq(record[1]-coordstart[1],record[2]-coordstart[1],seqline,0)
            fmavid2.write(''.join(seqline))
            for i in fmavid.readlines():
               fmavid2.write(i)
      shutil.move("foo.fa",file)
   os.chdir("..")
