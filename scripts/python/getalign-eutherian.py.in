#!/usr/bin/env python

import sys
import os
import shutil
import string
import glob
import datetime
import bisect
import errno

def mkdir(path):
   try:
      os.mkdir(path)
   except os.error, e:
      if e.errno != errno.EEXIST:
         raise

sys.path.append("@pythondir@")
import mapping

os.chdir('@pkgdatadir@')
mkdir('eutherian')
os.chdir('eutherian')
print "[",datetime.datetime.now(),"]  Getting Enrendo Pecan Ortheus alignment files from ENSEMBL..."
print 

mkdir('alignments')
os.chdir("alignments")
#os.system('wget -c -nd ftp://ftp.ensembl.org/pub/release-63/emf/ensembl-compara/epo_12_eutherian/*')

print "[",datetime.datetime.now(),"]  Extracting alignment files..."
print


#mkdir('gzip')
#os.system('cp *.gz gzip') ## TMP
#os.system('cp gzip/*.gz .') ## TMP
#os.system('gunzip -v *.gz')

print "[",datetime.datetime.now(),"]  Converting EMF files to fasta..."
print

def spe2short(name):
   if name == "mus_musculus": return "MusMus"
   elif name == "pan_troglodytes":  return "PanTro"
   elif name == "pongo_abelii":  return "PonAbe"
   elif name == "macaca_mulatta":   return "MacMul"
   elif name == "homo_sapiens":  return "HomSap"
   elif name == "rattus_norvegicus":   return "RatNor"
   elif name == "equus_caballus":   return "EquCab"
   elif name == "canis_familiaris": return "CanFam"
   elif name == "bos_taurus": return "BosTau"
   elif name == "sus_scrofa": return "SusScr"
   elif name == "gorilla_gorilla":  return "GorGor"
   elif name == "callithrix_jacchus":  return "CalJac"
   else: return "NA"

def spe2num(name):
   if name == "mus_musculus": return 0
   elif name == "pan_troglodytes":  return 1
   elif name == "pongo_abelii":  return 2
   elif name == "macaca_mulatta":   return 3
   elif name == "homo_sapiens":  return 4
   elif name == "rattus_norvegicus":   return 5
   elif name == "equus_caballus":   return 6
   elif name == "canis_familiaris": return 7
   elif name == "bos_taurus": return 8
   elif name == "sus_scrofa": return 9
   elif name == "gorilla_gorilla":  return 10
   elif name == "callithrix_jacchus":  return 11
   else: return -1

def chr2str(chr):
   if chr == "1": return "chr1"
   elif chr == "2":  return "chr2"
   elif chr == "3":  return "chr3"
   elif chr == "4":  return "chr4"
   elif chr == "5":  return "chr5"
   elif chr == "6":  return "chr6"
   elif chr == "7":  return "chr7"
   elif chr == "8":  return "chr8"
   elif chr == "9":  return "chr9"
   elif chr == "10": return "chr10"
   elif chr == "11": return "chr11"
   elif chr == "12": return "chr12"
   elif chr == "13": return "chr13"
   elif chr == "14": return "chr14"
   elif chr == "15": return "chr15"
   elif chr == "16": return "chr16"
   elif chr == "17": return "chr17"
   elif chr == "18": return "chr18"
   elif chr == "19": return "chr19"
   elif chr == "X":  return "chrX"
   elif chr == "Y":  return "chrY"
   else: return "others"

def reversecomp(seq):
   rseq=""
   for base in reversed(seq):
      if base == 'A':   rseq += 'T'
      elif base == 'a':   rseq += 't'
      elif base == 'C':   rseq += 'G'
      elif base == 'c':   rseq += 'g'
      elif base == 'G':   rseq += 'C'
      elif base == 'g':   rseq += 'c'
      elif base == 'T':   rseq += 'A'
      elif base == 't':   rseq += 'a'
      else: rseq += base
      
   return rseq



for file in glob.glob('*.emf'):
   with open(file) as femf:
      print file
      line=femf.readline()
      while 1:
         while line[0:3] != 'SEQ':
            line=femf.readline()
         cols = [ -1 for i in range(12) ]
         spes = [ "" for i in range(12) ]
         chrs = [ "" for i in range(12) ]
         stas = [ -1 for i in range(12) ]
         stos = [ -1 for i in range(12) ]
         strs = [ 0 for i in range(12) ]
         seqs = [ "" for i in range(12) ]
         vseqs = [ [] for i in range(12) ]
         col=0
         while line[0:3] == 'SEQ':
            coords=line.rstrip().split(" ")
            if coords[1] != "ancestral_sequences":
               spe=coords[1]
               chr=coords[2]
               sta=coords[3]
               sto=coords[4]
               str=coords[5]
               ns=spe2num(spe)
               cols[ns] = col
               spes[ns] = spe2short(spe)
               chrs[ns] = chr2str(chr)
               stas[ns] = sta
               stos[ns] = sto
               strs[ns] = int(str)
            col+=1
            line=femf.readline()
         
         nref=spe2num("mus_musculus")


         if cols[nref]==-1 or chrs[nref]=="":
            continue
         
         print chrs[nref],stas[nref],stos[nref],"length =",int(stos[nref])-int(stas[nref])+1
         
         femf.readline()
         line=femf.readline()
         counter=0
         while line[0:2] != '//':
            for i in range(12):
               if cols[i] != -1:
                  vseqs[i].append(line[cols[i]])
            counter += 1
            if not counter % 10000:
               print counter
            line=femf.readline()
         
         for i in range(12):
            seqs[i]=''.join(vseqs[i])

         folder=chrs[nref]
         mkdir(folder)
         filename=folder+"/"+stas[nref]+"-"+stos[nref]+".fa"
         fasta=open(filename,'w')
         
         strand=strs[nref]
         for i in range(12):
            if spes[i] != "":
               if spes[i] == 'MusMus':
                  fasta.write('>'+spes[i]+' '+chrs[i]+' '+stas[i]+' '+stos[i]+'\n')
               else:
                  fasta.write('>'+spes[i]+'\n')
               
               if strand == -1:
                  fasta.write(reversecomp(seqs[i])+'\n')
               else:
                  fasta.write(seqs[i]+'\n')
         
         line=femf.readline()
         if not line: break

sys.exit(1)


   
os.chdir('..')

print 'ok'
sys.exit()


print "[",datetime.datetime.now(),"]  Getting Flybase annotation files..."
print 
mkdir("annot")
os.chdir("annot")

os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-2L-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-2R-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-3L-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-3R-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-4-r5.38.gff.gz"')
os.system('wget -c "ftp://ftp.flybase.net/releases/current/dmel_r5.38/gff/dmel-X-r5.38.gff.gz"')

print "[",datetime.datetime.now(),"]  Extracting coordinate files..."
print

os.system('gunzip *.gff.gz')

print "[",datetime.datetime.now(),"]  Relevant coordinate extraction."
print 

os.system('awk \'/repeatmasker_dummy\tmatch\t/ {print $1,$4,$5}\' dmel*.gff | uniq > repeat-coord.dat')
os.system('awk \'/FlyBase\tCDS\t/ {print $1,$4,$5}\' dmel*.gff | uniq > CDS-coord.dat')
os.system('awk \'/FlyBase\tmRNA\t/ {\
   if ($7 == "+"){\
      print $1,$4\
   } else {\
      print $1,$5\
   }\
}\' dmel*.gff | uniq > TSS-coord.dat')
   

def processcoord(coords):
   for i in coords:
      i[1]=int(i[1])
      i[2]=int(i[2])
   coords.sort()

## Open file containing coding sequence coordinates
fcds=open("CDS-coord.dat")
cds=[i.rstrip().split(" ") for i in fcds.readlines()]
processcoord(cds)
cds
fcds.close()

## Open file containing repeated sequence coordinates
frepeat=open("repeat-coord.dat")
repeat=[i.rstrip().split(" ") for i in frepeat.readlines()]
processcoord(repeat)
frepeat.close()

os.chdir("..")

print("Relevant coordinates successfully imported.")

## Mask functions
def maskseq(start,stop,seq,mode):
   """Mask an aligned sequence (do not take into account gaps)
   start and stop should be integers with 0 corresponding to the start of the given sequence
   mode 0 mask with N
   mode 1 mask by converting the letter to lowercase
   """
   curpos=0
   for i,s in enumerate(seq):
      if s!='-' and s!='\n':
         if curpos>=start and curpos<=stop:
            if mode==0:
               seq[i]='N'
            elif mode==1:
               seq[i]=string.lower(s)
         curpos+=1

## Record selection functions
def posrecordleft(coordlist,coord):
   pos=bisect.bisect_left(coordlist,coord)
   if pos>0:
      pos=pos-1
   return pos

## Iterate over alignment files
os.chdir("alignments")
fmap=open("map")
maps=[i.rstrip().split("\t") for i in fmap.readlines()]
fmap.close

for i in maps:
   coordmel=i[1:4]
   if coordmel[1]!="NA" and coordmel[2]!='NA':
      coordmel[0]=coordmel[0][3:]
      coordmel[1]=int(coordmel[1])
      coordmel[2]=int(coordmel[2])
      r5coord=mapping.r4_map(coordmel)
      if  r5coord != ["", 0, 0]:
         os.chdir(i[0])
         with open("mavid.mfa") as fmavid:
            with open ("mavid2.mfa","w") as fmavid2:
               firstline=fmavid.readline()
               fmavid2.write(firstline.rstrip())
               fmavid2.write(" "+r5coord[0]+" "+str(r5coord[1])+" "+str(r5coord[2])+"\n")
               for line in fmavid.readlines():
                  if line[0]=='>':
                     fmavid2.write("\n"+line)
                  else:
                     fmavid2.write(line.rstrip())
         shutil.move("mavid2.mfa","mavid.mfa")
         os.chdir("..")
      else:
         shutil.rmtree(i[0])
   else:
      shutil.rmtree(i[0])



for folder in glob.glob('[0-9]*/'):
   print "Processing folder ",folder
   os.chdir(folder)
   with open('mavid.mfa') as fmavid:
      with open('mavid2.mfa', 'w' ) as fmavid2:

         ## Read coordinates
         coordline=fmavid.readline()
         fmavid2.write(coordline)
         coordline=coordline.rstrip().split(" ")
         coordstart=[coordline[1],int(coordline[2]),int(coordline[2])]
         coordstop=[coordline[1],int(coordline[3]),int(coordline[3])]
         
         ## Mask sequences
         seqline=list(fmavid.readline())
         posstart=posrecordleft(cds,coordstart)
         posstop=posrecordleft(cds,coordstop)
         for i in range(posstart,posstop):
            record=cds[i]
            if record[0]==coordstart[0]:
               maskseq(record[1]-coordstart[1],record[2]-coordstart[1],seqline,0)
         posstart=posrecordleft(repeat,coordstart)
         posstop=posrecordleft(repeat,coordstop)
         for i in range(posstart,posstop):
            record=repeat[i]
            if record[0]==coordstart[0]:
               maskseq(record[1]-coordstart[1],record[2]-coordstart[1],seqline,1)
         fmavid2.write(''.join(seqline))
         for i in fmavid.readlines():
            fmavid2.write(i)
   shutil.move("mavid2.mfa","mavid.mfa")
   os.chdir("..")
