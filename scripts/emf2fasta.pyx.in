# -*- coding: utf-8 -*-
#    
# Copyright (C) 2006-2011 Herve Rouault <rouault@lps.ens.fr>
# Copyright (C) 2009-2011 Marc Santolini <santolin@lps.ens.fr>
# 
# This file is part of Imogene.
# 
# Imogene is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Imogene is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Imogene; see the file COPYING  If not, see <http://www.gnu.org/licenses/>.

import os
import glob
import errno
import string
import datetime
import sys

nspe = 12

def mkdir(path):
   try:
      os.mkdir(path)
   except os.error, e:
      if e.errno != errno.EEXIST:
         raise

spe2prop = { "mus_musculus" : [ "MusMus", 0 ],
   "pan_troglodytes":  [ "PanTro", 1 ],
   "pongo_abelii":  [ "PonAbe", 2 ],
   "macaca_mulatta":   [ "MacMul", 3 ],
   "homo_sapiens":  [ "HomSap", 4 ],
   "rattus_norvegicus":   [ "RatNor", 5 ],
   "equus_caballus":   [ "EquCab", 6 ],
   "canis_familiaris": [ "CanFam", 7 ],
   "bos_taurus": [ "BosTau", 8 ],
   "sus_scrofa": [ "SusScr", 9 ],
   "gorilla_gorilla":  [ "GorGor", 10 ],
   "callithrix_jacchus":  [ "CalJac", 11 ]}

def chr2str(chr):
   [
   if chr == "1": return "1"
   elif chr == "2":  return "2"
   elif chr == "3":  return "3"
   elif chr == "4":  return "4"
   elif chr == "5":  return "5"
   elif chr == "6":  return "6"
   elif chr == "7":  return "7"
   elif chr == "8":  return "8"
   elif chr == "9":  return "9"
   elif chr == "10": return "10"
   elif chr == "11": return "11"
   elif chr == "12": return "12"
   elif chr == "13": return "13"
   elif chr == "14": return "14"
   elif chr == "15": return "15"
   elif chr == "16": return "16"
   elif chr == "17": return "17"
   elif chr == "18": return "18"
   elif chr == "19": return "19"
   elif chr == "X":  return "X"
   elif chr == "Y":  return "Y"
   else: return "others"

def emf2fasta():
   for file in glob.glob('*.emf'):
      with open(file) as femf:
         print "[",datetime.datetime.now(),"] Reading ",file+"..."
         print 
         lines=femf.readlines()
         
         headers = [ index for index,line in enumerate(lines) if line.find('SEQ') != -1 and lines[index-1].find('SEQ') == -1 ]
         startseqs = [ index+1 for index,line in enumerate(lines) if line.find('DATA') != -1 ]
         stopseqs = [ index for index,line in enumerate(lines) if line.find('//') != -1 ]
         
         print "[",datetime.datetime.now(),"] Converting to fasta..."
         print 

         index = 0
         while index < len(headers):
            ## READ HEADER
            cols = [ -1 for i in range(nspe) ]
            spes = [ "" for i in range(nspe) ]
            chrs = [ "" for i in range(nspe) ]
            stas = [ -1 for i in range(nspe) ]
            stos = [ -1 for i in range(nspe) ]
            strs = [ 0 for i in range(nspe) ]
            seqs = [ "" for i in range(nspe) ]
            vseqs = [ [] for i in range(nspe) ]

            line=lines[headers[index]]
            col=0
            while line[0:3] == 'SEQ':
               coords=line.rstrip().split(" ")
               if coords[1] != "ancestral_sequences":
                  spe=coords[1]
                  chr=coords[2]
                  sta=coords[3]
                  sto=coords[4]
                  str=coords[5]
                  speprop=spe2prop.get(spe, ["NA",-1])
                  ns=speprop[0]
                  cols[ns] = col
                  spes[ns] = speprop[1]
                  chrs[ns] = chr2str(chr)
                  stas[ns] = sta
                  stos[ns] = sto
                  strs[ns] = int(str)
               col+=1
               line=lines[headers[index]+col]
            
            ## CHECK MUS MUSCULUS IS PRESENT

            nref=spe2prop["mus_musculus"][0]
            if cols[nref]==-1 or chrs[nref]=="":
               index += 1
               continue
           
            ## READ SEQUENCES
            
            strand=strs[nref]            
            if strand == 1:  
               for i in range(nspe):
                  vseqs[i] = [ line[cols[i]] for line in lines[startseqs[index]:stopseqs[index]] if cols[i] != -1 ]
                  seqs[i] = ''.join(vseqs[i])
            elif strand == -1:
               for i in range(nspe):
                  vseqs[i] = [ line[cols[i]] for line in lines[startseqs[index]:stopseqs[index]] if cols[i] != -1 ]
                  vseqs[i].reverse()
                  seqs[i] = ''.join(vseqs[i])
                  seqs[i]=seqs[i].translate(string.maketrans('AaTtCcGg','TtAaGgCc'))

            ## DISPLAY PROGRESS BAR
            sys.stdout.write('\r')
            ipc = int(float(index+1)/len(headers)*100)
            sys.stdout.write("[%-100s] %d%%" % ('='*ipc, ipc))
            sys.stdout.flush()
            #print " ",chrs[nref],stas[nref],stos[nref],strand,"length =",int(stos[nref])-int(stas[nref])+1
            #for i in range(nspe):
            #   print i,seqs[i][0:20],"...",seqs[i][len(seqs[i])-20:len(seqs[i])]

            ## WRITE FASTA FORMATTED FILE
            
            folder="chr"+chrs[nref]
            mkdir(folder)
            filename=folder+"/"+stas[nref]+"-"+stos[nref]+".fa"
            fasta=open(filename,'w')
            
            for i in range(nspe):
               if spes[i] != "":
                  if spes[i] == 'MusMus':
                     fasta.write('>'+spes[i]+' '+chrs[i]+' '+stas[i]+' '+stos[i]+'\n')
                  else:
                     fasta.write('>'+spes[i]+'\n')
                  fasta.write(seqs[i]+'\n')
            
            index += 1
         
         print

emf2fasta()
