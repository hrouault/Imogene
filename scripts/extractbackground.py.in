#!@PYTHON@
# -*- coding: utf-8 -*-
#
# Copyright (C) 2006-2011 Herve Rouault <rouault@lps.ens.fr>
# Copyright (C) 2009-2011 Marc Santolini <santolin@lps.ens.fr>
#
# This file is part of Imogene.
#
# Imogene is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Imogene is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Imogene; see the file COPYING  If not, see
# <http://www.gnu.org/licenses/>.

import glob
import os
import random
import bisect
import argparse

nbtoextract = 10000
seqlength = 2000
limittry = nbtoextract * 5

aligncoords = []
weights = []

try:
    os.chdir(os.environ['IMOGENE_DATA'])
except KeyError:
    os.chdir('@pkgdatadir@')

mkdir(args.species)
os.chdir(args.species)

if args.species == 'eutherian':
    for line in open("align.dat"):
        line = line.rstrip().split()
        coord = [line[0], int(line[1]), int(line[2])]
        aligncoords.append(coord)
        weights.append(float(coord[2] - coord[1]))
else:
    for folder in glob.glob('alignments/[0-9]*/'):
        os.chdir(folder)
        with open('mavid.mfa') as fmavid:
            firstline = fmavid.readline().rstrip().split()
            coord = [firstline[1], int(firstline[2]), int(firstline[3])]
            aligncoords.append(coord)
            weights.append(float(coord[2] - coord[1]))
        os.chdir('../..')


sumweights = 0.0
for w in weights:
    sumweights += w
for i in range(len(weights)):
    weights[i] /= sumweights

## Open file containing coding sequence coordinates
with fcds as open('annot/CDS-coord.dat'):
    cds = [i.rstrip().split() for i in fcds]
for i in cds:
    i[1] = int(i[1])
    i[2] = int(i[2])
fcds.close()


def weighted_choice(coords, weights):
    x = random.random()
    for i, w in enumerate(weights):
        if x < w:
            return coords[i]
        x -= w


def isnotin(coord, listcoords):
    for i in listcoords:
        if coord[0] == i[0] and i[1] < coord[2] and i[2] > coord[1]:
            return False
    return True


def posrecordleft(coordlist, coord):
    """Record selection function"""
    pos = bisect.bisect_left(coordlist, coord)
    if pos > 0:
        pos = pos - 1
    return pos

coords = []
nbtry = 0
nbextracted = 0
while nbextracted < nbtoextract:
    align = weighted_choice(aligncoords, weights)
    if align[2] - align[1] - seqlength > 0:
        start = random.randint(0, align[2] - align[1] - seqlength)
        potcoord = [align[0], align[1] + start, align[1] + start + 2000]

        alignstart = [align[0], align[1], align[1]]
        alignstop = [align[0], align[2], align[2]]
        posstart = posrecordleft(cds, alignstart)
        posstop = posrecordleft(cds, alignstop)
        cdsinalign = []
        for i in range(posstart, posstop):
            cdsinalign.append(cds[i])

        if isnotin(potcoord, cdsinalign) and isnotin(potcoord, coords):
            coords.append(potcoord)
            nbextracted += 1
    nbtry += 1
    if nbtry > limittry:
        print ('Did not manage to extract a sufficient number'
               'of background sequence!')
        sys.exit(1)

coords.sort()

for i, c in enumerate(coords):
    print c[0], c[1], c[2], "back" + str(i)
